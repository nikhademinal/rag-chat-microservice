version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ragchat-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ragchat_db
      MYSQL_USER: ${DATABASE_USERNAME:-ragchat_user}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-ragchat_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Database Management Tool (Adminer)
  adminer:
    image: adminer:latest
    container_name: ragchat-adminer
    ports:
      - "8081:8080"
    networks:
      - app-network
    depends_on:
      - mysql
    environment:
      ADMINER_DEFAULT_SERVER: mysql

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragchat-app
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      # Database Configuration
      DATABASE_URL: jdbc:mysql://mysql:3306/ragchat_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      DATABASE_USERNAME: ${DATABASE_USERNAME:-ragchat_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-ragchat_password}

      # Security
      API_KEY: ${API_KEY:-your-secret-api-key}

      # Rate Limiting
      RATE_LIMIT_CAPACITY: ${RATE_LIMIT_CAPACITY:-100}
      RATE_LIMIT_REFILL_TOKENS: ${RATE_LIMIT_REFILL_TOKENS:-100}
      RATE_LIMIT_REFILL_DURATION: ${RATE_LIMIT_REFILL_DURATION:-60}

      # AI Configuration
      AI_ASSISTANT_ENABLED: ${AI_ASSISTANT_ENABLED:-true}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
      HUGGINGFACE_API_URL: ${HUGGINGFACE_API_URL:-https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium}
      AI_ASSISTANT_TIMEOUT: ${AI_ASSISTANT_TIMEOUT:-30000}

      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}

      # Logging
      SHOW_SQL: ${SHOW_SQL:-false}
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local